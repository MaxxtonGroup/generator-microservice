buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
    classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
    classpath("se.transmode.gradle:gradle-docker:1.2")
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'docker'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'

jar {
  baseName = '<%= baseName %>'
  version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
group = '<%= baseName %>'
springBoot {
  mainClass = '<%= packageName %>.<%= mainClassName %>'
}

// sidenote
// this task only works when you run it from command line after you init boot2docker (osx)
// $(boot2docker shellinit)
task buildDocker(type: Docker, dependsOn: [build, jar]) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  dockerBinary = file('/usr/local/bin/docker') // move to a gradle.properties
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}

// add tasks to a gradle group
configure(buildDocker) {
  group = 'distribution'
  description = 'Create a Docker image'
}


repositories {
  mavenCentral()
  maven { url 'http://repo.spring.io/milestone' }
  maven { url 'http://repo.spring.io/snapshot' }
  maven { url 'http://repo.spring.io/release' }

  maven {
    name 'Maxxton Private repository'
    url 'http://mxt-maven01.newyse.maxxton/repository/internal'
    credentials {
      username 'microservices'
      password 'changeThisAfterGenerating'
    }
  }
}


dependencies {
  compile("org.springframework.boot:spring-boot-starter:${spring_boot_version}")
  compile("org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}")
  compile("org.springframework.boot:spring-boot-starter-logging:${spring_boot_version}")
  compile("org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}")
  compile("org.springframework.boot:spring-boot-starter-security:${spring_boot_version}")

  compile("org.springframework.cloud:spring-cloud-starter")
  compile("org.springframework.cloud:spring-cloud-starter-security")
  compile("org.springframework.cloud:spring-cloud-starter-hystrix")
  compile("org.springframework.cloud:spring-cloud-starter-eureka")
  compile("org.springframework.cloud:spring-cloud-starter-config")

  compile("org.springframework.security.oauth:spring-security-oauth2")
  compile("org.springframework.security:spring-security-jwt")

  compile("io.reactivex:rxjava:${rxjava_version}")

  <% if (dataJpaEnabled) { %>
  compile("org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}")
  compile("com.zaxxer:HikariCP:${hikaricp_version}")
  compile("com.oracle:ojdbc6:${oracle_jdbc_version}")
  <% } %>

  <% if (swaggerEnabled) { %>
  compile("io.springfox:springfox-swagger2:${spring_swagger_version}")
  compile("io.springfox:springfox-swagger-ui:${spring_swagger_version}")
  <% } %>

  compile("com.ryantenney.metrics:metrics-spring:${spring_metrics_version}") {
    exclude group: 'com.codahale.metrics'
    exclude group: 'org.springframework'
  }

  compile("io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}")
  compile("io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}")
  compile("io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}")
  compile("io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}")
  compile("io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}")

  compile("net.logstash.logback:logstash-logback-encoder:${logback_encoder_version}")

  testCompile("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}")
  testCompile("org.assertj:assertj-core:${assertj_core_version}")
  testCompile("junit:junit:${junit_version}")
  testCompile("org.mockito:mockito-core:${mockito_version}")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Angel.SR4"
  }
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.9'
}
